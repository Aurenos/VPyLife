{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"m",
				"main	main()"
			],
			[
				"waf",
				"secret_waffle"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "# VPyLife Wireframe Grid module\n# Kile Deal\n\nfrom visual import frame, curve, materials, color, rate, scene, box\nfrom random import randrange\n\nclass WireFrameGrid:\n	def __init__(self, scale=1, length=1, width=1, height=1, pos=(0,0,0), visible=True, thickness=0, color=color.white,\n				 material=None, animate_gen=False, animate_rate=5):\n		self.scale = scale\n		self.length = length\n		self.width = width\n		self.height = height\n		self.frame = frame()\n		self.visible = visible\n		self.thickness = thickness\n		self.pos = pos\n		self.x = pos[0]\n		self.y = pos[1]\n		self.z = pos[2]\n		self.color = color\n		self.material = material\n		self.animate_gen = animate_gen\n		self.animate_rate = animate_rate\n\n	@property\n	def volume(self):\n	    return self.length * self.width * self.height # The number of boxes\n\n	def set_pos(self, value):\n		self.pos = value\n		self.x = pos[0]\n		self.y = pos[1]\n		self.z = pos[2]\n\n	def set_visibility(self, val):\n		self.visible = val\n		self.frame.visible = self.visible\n	\n	def generate(self):\n		sref = self.scale/2.0\n\n		# Lines from back to front\n		mult = 0\n		yval = self.y+self.height*sref\n		for y in xrange(self.height+1):\n			if self.animate_gen: rate(self.animate_rate)\n			for x in xrange(self.length+1):\n				if self.animate_gen: rate(self.animate_rate)\n				curve(pos=[(self.x-self.length*sref+sref*mult, yval, self.z+self.width*sref),\n						   (self.x-self.length*sref+sref*mult, yval, self.z-self.width*sref)],\n					frame=self.frame, radius=self.thickness, material=self.material, color=self.color)\n				mult += 2\n			yval -= sref*2\n			mult = 0\n\n		# Lines from left to right\n		mult = 0\n		yval = self.y+self.height*sref\n		for y in xrange(self.height+1):\n			if self.animate_gen: rate(self.animate_rate)\n			for z in xrange(self.width+1):\n				if self.animate_gen: rate(self.animate_rate)\n				curve(pos=[(self.x-self.length*sref, yval, self.z-self.width*sref+sref*mult),\n						   (self.x+self.length*sref, yval, self.z-self.width*sref+sref*mult)],\n					frame=self.frame, radius=self.thickness, material=self.material, color=self.color)\n				mult += 2\n			yval -= sref*2\n			mult = 0\n\n		# Lines from top to bottom\n		mult = 0\n		xval = self.x-self.length*sref\n		for x in xrange(self.length+1):\n			if self.animate_gen: rate(self.animate_rate)\n			for z in xrange(self.width+1):\n				if self.animate_gen: rate(self.animate_rate)\n				curve(pos=[(xval, self.y+self.height*sref, self.z-self.width*sref+sref*mult),\n					   (xval, self.y-self.height*sref, self.z-self.width*sref+sref*mult)],\n					frame=self.frame, radius=self.thickness, material=self.material, color=self.color)\n				mult += 2\n			xval += sref*2\n			mult = 0				\n\nif __name__ == '__main__': # For fun and testing purposes\n	scene.height=800\n	scene.width=800\n	scene.range = 5\n	var = 1\n	test = WireFrameGrid(length = var, width = var, height = var, thickness=0.005, color=color.green,\n		animate_gen=False, animate_rate=20)\n	test.generate() \n	box(color=color.green, material=materials.emissive, frame=test.frame, length=var, height=var, width=var)\n\n	## Just for fun\n	# ax = randrange(0,10,1)\n	# ay = randrange(0,10,1)\n	# az = randrange(0,10,1)\n	# dx, dy, dz = 0, 0, 0\n	# change = 0\n	# changing = False\n	# while True:\n	# 	rate(25)\n	# 	test.frame.rotate(axis=(ax,ay,az), angle=3.14/70)\n	\n	# 	if changing:\n	# 		if ax == dx and ay == dy and az == dz:\n	# 			changing = False\n	# 			print \"Changed\"\n	# 			change = 0\n	# 		else:\n	# 			if ax > dx: ax -= 1\n	# 			elif ax < dx: ax += 1\n	# 			if ay > dy: ay -= 1\n	# 			elif ay < dy: ay += 1\n	# 			if az > dz: az -= 1\n	# 			elif az < dz: az += 1\n	# 	else:	\n	# 		change += 1\n	# 		if change == 100:\n	# 			dx = randrange(0,10,1)\n	# 			dy = randrange(0,10,1)\n	# 			dz = randrange(0,10,1)\n	# 			changing = True",
			"file": "wireframe.py",
			"file_size": 3774,
			"file_write_time": 130276686745711925,
			"settings":
			{
				"buffer_size": 3699,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "# VPyLife - Cell module\n# Kile Deal\n\nfrom visual import box, color, materials\n\nclass Cell(box):\n	def __init__(self, length=1, height=1, width=1, pos=(0,0,0), color=color.white, material=None, alive=False):\n		self.length = length\n		self.height = height\n		self.width = width\n		self.pos = pos\n		self.color = color\n		self.material = material\n		self.alive = alive\n\n",
			"file": "cell.py",
			"file_size": 40,
			"file_write_time": 130276688547214965,
			"settings":
			{
				"buffer_size": 360,
				"line_ending": "Windows",
				"name": "from visual import box, color, materials"
			}
		},
		{
			"file": "main.py",
			"settings":
			{
				"buffer_size": 90,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 58.0,
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"python",
				"Set Syntax: Python"
			],
			[
				"setsyn c",
				"Set Syntax: C++"
			],
			[
				"",
				"About"
			],
			[
				"synt c",
				"Set Syntax: C++"
			],
			[
				"Snippet: ",
				"Snippet: Vector For Loop"
			],
			[
				"setsyn py",
				"Set Syntax: Python"
			],
			[
				"setsyn c+",
				"Set Syntax: C++"
			]
		],
		"width": 400.0
	},
	"console":
	{
		"height": 146.0,
		"history":
		[
			"import urllib.request,os; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read())",
			"print ",
			"clear",
			"exit()",
			"derp",
			"python"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/Users/Aurenos/Documents/test.py",
		"/C/Program Files (x86)/Steam/SteamApps/common/Dark Souls Prepare to Die Edition/DATA/DSfix.ini",
		"/C/Program Files (x86)/Steam/SteamApps/common/Audiosurf 2/mods/mono/mono.lua",
		"/C/Users/Aurenos/AppData/Roaming/Sublime Text 3/Packages/Default/Preferences.sublime-settings",
		"/C/Users/Aurenos/Code/Python/derp.py",
		"/C/Users/Aurenos/Code/CPP/bnyeh.cpp",
		"/C/Users/Aurenos/AppData/Roaming/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/C/Users/Aurenos/AppData/Roaming/Sublime Text 3/Packages/Default/Default (Windows).sublime-keymap"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"python",
			"name",
			"font"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "wireframe.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3699,
						"regions":
						{
						},
						"selection":
						[
							[
								43,
								43
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "cell.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 360,
						"regions":
						{
						},
						"selection":
						[
							[
								359,
								359
							]
						],
						"settings":
						{
							"auto_name": "from visual import box, color, materials",
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "main.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 90,
						"regions":
						{
						},
						"selection":
						[
							[
								90,
								90
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 118.0
	},
	"project": "VPyLife.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"fag",
				"fag"
			],
			[
				"mon",
				"MONM"
			],
			[
				"unt",
				"untitled"
			],
			[
				"nig",
				"NIGGER"
			],
			[
				"",
				"GIBBLETS"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
